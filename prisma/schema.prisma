// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id                  Int        @id @default(autoincrement())
  group_name          String
  description         String
  photo_url           String
  tags                Tag[]
  goal_rep            Int
  discord_webhook_url String
  discord_invite_url  String
  badges              Badge[]
  user_count          Int      @default(0)
  like_count          Int      @default(0)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User[]
  record              Record[]
}




model User {
  id         Int       @id @default(autoincrement())
  group      Group     @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   Int
  nickname   String
  password   String
  record     Record[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  auth_code  auth_code
}

enum auth_code {
  OWNER
  PARTICIPANTS
}

model Record {
  id            Int           @id @default(autoincrement())
  nickname      String
  exercise_type exercise_type
  description   String
  time          Int
  distance      Float
  images        String[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  password      String
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  group         Group         @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id      Int
}

enum exercise_type {
  RUNNING
  CYCLE
  SWIMMING
}

model Image {
  id          Int      @id @default(autoincrement())
  name        String
  path        String
  uploaded_at DateTime @default(now())
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  group      Group    @relation(fields: [group_id], references: [id],onDelete: Cascade)
  group_id   Int
}

model Badge {
  id        Int     @id @default(autoincrement())
  code      String
  group     Group   @relation(fields: [group_id], references: [id],onDelete: Cascade)
  group_id  Int

  @@unique([code, group_id])
}